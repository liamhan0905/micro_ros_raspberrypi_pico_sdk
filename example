#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "hardware/pwm.h"

#define IN1_PIN 0
#define IN2_PIN 1
#define PWM_PIN 2
#define PWM_FREQUENCY 10000

void motor_forward(uint8_t duty_cycle) {
    gpio_put(IN1_PIN, 1);
    gpio_put(IN2_PIN, 0);
    pwm_set_gpio_level(PWM_PIN, (uint16_t)(duty_cycle * 65535 / 100));
}

void motor_backward(uint8_t duty_cycle) {
    gpio_put(IN1_PIN, 0);
    gpio_put(IN2_PIN, 1);
    pwm_set_gpio_level(PWM_PIN, (uint16_t)(duty_cycle * 65535 / 100));
}

void motor_stop() {
    gpio_put(IN1_PIN, 0);
    gpio_put(IN2_PIN, 0);
    pwm_set_gpio_level(PWM_PIN, 0);
}

int main() {
    // Initialize GPIO pins
    gpio_init(IN1_PIN);
    gpio_set_dir(IN1_PIN, GPIO_OUT);
    gpio_init(IN2_PIN);
    gpio_set_dir(IN2_PIN, GPIO_OUT);
    gpio_init(PWM_PIN);
    gpio_set_function(PWM_PIN, GPIO_FUNC_PWM);

    // Set up PWM
    uint slice_num = pwm_gpio_to_slice_num(PWM_PIN);
    uint8_t duty_cycle = 0;
    pwm_set_wrap(slice_num, 65535);
    pwm_set_clkdiv(slice_num, 2.0f);
    pwm_init(slice_num, PWM_FREQUENCY);

    while (1) {
        // Rotate motor forward
        for (duty_cycle = 0; duty_cycle <= 100; duty_cycle++) {
            motor_forward(duty_cycle);
            sleep_ms(10);
        }
        motor_stop();
        sleep_ms(1000);

        // Rotate motor backward
        for (duty_cycle = 100; duty_cycle >= 0; duty_cycle--) {
            motor_backward(duty_cycle);
            sleep_ms(10);
        }
        motor_stop();
        sleep_ms(1000);
    }

    return 0;
}

